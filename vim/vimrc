call pathogen#infect()

set nocompatible
set encoding=utf-8
filetype plugin indent on


"" Whitespace
set nowrap
set tabstop=4 shiftwidth=4
set softtabstop=4
set expandtab
set backspace=indent,eol,start
set autoindent
"au BufRead,BufNewFile *.py,*.pyw,*.php set textwidth=79

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

"" Leader key
let mapleader = ","

"" Disable cursor keys
noremap   <Up>     <NOP>
noremap   <Down>   <NOP>
noremap   <Left>   <NOP>
noremap   <Right>  <NOP>

"" Disable cursor keys in insert mode
inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>

noremap <leader><space> :noh<cr>:call clearmatches()<cr>
let g:ctrlp_map = '<leader>p'
nnoremap <leader>a :Ack!<space>
inoremap <Nul> <C-x><C-o>

noremap H ^
noremap L $



function! ToggleNERDTreeAndTagbar()
    let w:jumpbacktohere = 1

    " Detect which plugins are open
    if exists('t:NERDTreeBufName')
        let nerdtree_open = bufwinnr(t:NERDTreeBufName) != -1
    else
        let nerdtree_open = 0
    endif
    let tagbar_open = bufwinnr('__Tagbar__') != -1

    " Perform the appropriate action
    if nerdtree_open && tagbar_open
        NERDTreeClose
        TagbarClose
    elseif nerdtree_open
        TagbarOpen
    elseif tagbar_open
        NERDTree
    else
        NERDTree
        TagbarOpen
    endif

    " Jump back to the original window
    for window in range(1, winnr('$'))
        execute window . 'wincmd w'
        if exists('w:jumpbacktohere')
            unlet w:jumpbacktohere
            break
        endif
    endfor
endfunction
"nnoremap <leader>\ :call ToggleNERDTreeAndTagbar()<CR>

map <Leader>n <plug>NERDTreeTabsToggle<CR>



"" Backup & tmp files
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" Omni-complete 
"let $Tlist_Ctags_Cmd='/usr/local/bin/ctags'
"let g:clang_user_options='|| exit 0'
let g:jedi#auto_initialization = 0
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

"" Interface
syntax enable
set showcmd
set statusline+=%#warningmsg#
set noerrorbells
set t_Co=256
let g:Powerline_symbols = 'fancy'

"set background=molokai
"let g:solarized_termtrans=0
"let g:solarized_termcolors=256
"let g:solarized_contrast="high"
"let g:solarized_visibility="high"
"colorscheme molokai 
colorscheme badwolf

"set guitablabel=[%N]\ %M\ %t
set guitablabel=%N/\ %t\ %M
"set guitablabel=[%N]\ %M\ %{ShortTabLabel()} 
set ruler
set laststatus=2
set lazyredraw
"set showmatch
set scrolloff=10
set sidescrolloff=10
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set cursorline

set wildignore=*.bak,*.pyc,*.swp
set wildmenu
set wildmode=list


"autocmd FileType html,htmldjango,jinjahtml,eruby,mako,phtml let b:closetag_html_style=1
autocmd FileType html,xhtml,xml,htmldjango,jinjahtml,eruby,mako,phtml,tpl source ~/.vim/bundle/closetag/plugin/closetag.vim

au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.txt,*.tex set wrap linebreak nolist textwidth=0 wrapmargin=0

"" Django
noremap _dt :set ft=htmldjango<CR>
nnoremap _pd :set ft=python.django<CR>
au BufNewFile,BufRead admin.py     setlocal filetype=python.django
au BufNewFile,BufRead urls.py      setlocal filetype=python.django
au BufNewFile,BufRead models.py    setlocal filetype=python.django
au BufNewFile,BufRead views.py     setlocal filetype=python.django
au BufNewFile,BufRead settings.py  setlocal filetype=python.django
au BufNewFile,BufRead forms.py     setlocal filetype=python.django

"" Syntastic
let g:syntastic_enable_signs = 1
let g:syntastic_check_on_open = 1
let g:syntastic_disabled_filetypes = ['html', 'rst']
let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

au FileType python set omnifunc=pythoncomplete#Complete
"let g:SuperTabDefaultCompletionType = "context"
"let g:SuperTabContextDefaultCompletionType = "<c-n>"

"" Tagbar
